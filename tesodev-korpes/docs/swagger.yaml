definitions:
  tesodev-korpes_CustomerService_internal_types.CustomerResponseModel:
    properties:
      additional_info:
        additionalProperties:
          type: string
        type: object
      age:
        type: integer
      contact_option:
        items:
          type: string
        type: array
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      token:
        type: string
      username:
        type: string
    type: object
  tesodev-korpes_OrderService_internal_types.OrderResponseModel:
    properties:
      created_at:
        type: string
      customer_id:
        type: string
      order_name:
        type: string
      order_total:
        type: integer
      payment_method:
        type: string
      priceCent:
        type: integer
      shipment_status:
        type: string
      updated_at:
        type: string
    type: object
  types.Customer:
    properties:
      additional_info:
        additionalProperties:
          type: string
        type: object
      age:
        type: integer
      city:
        type: string
      contact_option:
        items:
          type: string
        type: array
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      membership_type:
        type: string
      password:
        type: string
      phone:
        type: string
      state:
        type: string
      token:
        type: string
      updated_at:
        type: string
      username:
        type: string
      zip_code:
        type: string
    required:
    - first_name
    - last_name
    - password
    - username
    type: object
  types.CustomerRequestModel:
    properties:
      age:
        type: integer
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - first_name
    - last_name
    - password
    - username
    type: object
  types.CustomerUpdateModel:
    properties:
      additional_info:
        additionalProperties:
          type: string
        type: object
      address:
        type: string
      age:
        type: string
      city:
        type: string
      contact_option:
        items:
          type: string
        type: array
      created_at:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      membership_type:
        type: string
      password:
        type: string
      phone:
        type: string
      state:
        type: string
      updated_at:
        type: string
      username:
        type: string
      zip_code:
        type: string
    required:
    - password
    - username
    type: object
  types.OrderRequestModel:
    properties:
      customer_id:
        type: string
      order_name:
        type: string
      order_total:
        type: integer
      payment_method:
        type: string
      priceCent:
        type: integer
    type: object
  types.OrderUpdateModel:
    properties:
      order_name:
        type: string
      payment_method:
        type: string
      priceCent:
        type: integer
      shipment_status:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /customer/:
    post:
      consumes:
      - application/json
      description: Create a new customer with the provided details
      parameters:
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/types.CustomerRequestModel'
      produces:
      - application/json
      responses:
        "201":
          description: Customer created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid customer data
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new customer
      tags:
      - customer
  /customer/{id}:
    delete:
      description: Delete a customer by their ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: JWT token
        in: header
        name: Authentication
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Customer deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Customer not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete customer
      tags:
      - customer
    get:
      description: Get customer details by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: JWT token
        in: header
        name: Authentication
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tesodev-korpes_CustomerService_internal_types.CustomerResponseModel'
        "400":
          description: Invalid customer ID
          schema:
            type: string
        "404":
          description: Customer not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get customer by ID
      tags:
      - customer
    patch:
      consumes:
      - application/json
      description: Partially update customer details with the given data
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/types.CustomerUpdateModel'
      - description: JWT token
        in: header
        name: Authentication
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Customer partially updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Customer not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Partially update customer details
      tags:
      - customer
    put:
      consumes:
      - application/json
      description: Update customer details with the given data
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/types.CustomerUpdateModel'
      - description: JWT token
        in: header
        name: Authentication
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Customer updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            type: string
        "404":
          description: Customer not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update customer details
      tags:
      - customer
  /customers:
    get:
      consumes:
      - application/json
      description: Retrieve a list of customers based on optional filters like first
        name, age greater than, and age less than. Pagination is supported.
      parameters:
      - description: Filter by first name
        in: query
        name: first_name
        type: string
      - description: Filter by age greater than
        in: query
        name: agt
        type: integer
      - description: Filter by age less than
        in: query
        name: alt
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Customer data retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid page or limit parameter
          schema:
            type: string
        "404":
          description: No customers found
          schema:
            type: string
        "500":
          description: Error fetching customers
          schema:
            type: string
      summary: Get customers by filter
      tags:
      - customer
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Customer'
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Invalid credentials
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: User login
      tags:
      - authentication
  /order/{customer_id}:
    post:
      consumes:
      - application/json
      description: Create a new order for a specific customer
      parameters:
      - description: Customer ID
        in: path
        name: customer_id
        required: true
        type: string
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/types.OrderRequestModel'
      - description: JWT token
        in: header
        name: Authentication
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a new order
      tags:
      - order
  /order/{id}:
    delete:
      description: Delete an order by its ID
      parameters:
      - description: JWT token
        in: header
        name: Authentication
        required: true
        type: string
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete order
      tags:
      - order
    get:
      description: Get order details by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: JWT token
        in: header
        name: Authentication
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tesodev-korpes_OrderService_internal_types.OrderResponseModel'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get order by ID
      tags:
      - order
    patch:
      consumes:
      - application/json
      description: Partially update order details with the given data
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: JWT token
        in: header
        name: Authentication
        required: true
        type: string
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/types.OrderUpdateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Partially update order details
      tags:
      - order
    put:
      consumes:
      - application/json
      description: Update order details with the given data
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: JWT token
        in: header
        name: Authentication
        required: true
        type: string
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/types.OrderUpdateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update order details
      tags:
      - order
  /verify:
    get:
      description: Verify JWT token and check user existence
      parameters:
      - description: JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token verified and user exists
          schema:
            type: string
        "401":
          description: Invalid or expired token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Verify JWT token
      tags:
      - authentication
swagger: "2.0"
