services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 20s
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 5s
      timeout: 60s
      retries: 30
      start_period: 30s
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_CLEANER_DELETE_RETENTION_MS: 5000
      KAFKA_BROKER_ID: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - app-network

  kowl:
    image: quay.io/cloudhut/kowl:latest
    container_name: kowl
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$KOWL_CONFIG_FILE\" > /tmp/config.yml; /app/kowl"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      KOWL_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:9092"]  # Use the correct internal network port for Kafka
        connect:
          enabled: true
          clusters:
            - name: kafka
              url: http://connector:8083
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  customer-service:
    build:
      context: ./tesodev-korpes/
      dockerfile: Dockerfile-customer
    command: [ "/tesodev", "customer" ]
    ports:
      - "1923:1907"
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - app-network

  order-service:
    build:
      context: ./tesodev-korpes/
      dockerfile: Dockerfile-order
    command: ["/tesodev", "order" ]
    ports:
      - "1999:1881"
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - app-network

  consumer-service:
    build:
      context: ./tesodev-korpes/
      dockerfile: Dockerfile-consumer
    command: [ "/bin/sh", "-c", "sleep 10 && /tesodev consumer" ]
    ports:
      - "1139:1938"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
